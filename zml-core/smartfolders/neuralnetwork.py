"""
created: 9/8/2017
(c) copyright 2017 Synacor, Inc

This is a neural network that can take both a small number of words, which comprise the subject, and
a few features of the e-mail, generated by relationships of the contacts and domains in the address block
to the user account as analytics, as well as any other features that may be useful.
"""
from neon.models import Model
from neon.layers import MergeMultistream, LSTM, Affine, RecurrentSum, Tree, BranchNode, SkipNode
from neon.initializers import GlorotUniform
from neon.optimizers import Adam
from neon.transforms import Softmax, Rectlin, Logistic


class ClassifierNetwork(Model):
    def __init__(self, overlapping_classes=None, exclusive_classes=None):
        if overlapping_classes is None:
            self.overlapping_classes = ['important', 'automated']
        else:
            self.overlapping_classes = overlapping_classes

        if exclusive_classes is None:
            self.exclusive_classes = ['financial', 'shopping', 'social', 'travel', 'business']
        else:
            self.exclusive_classes = exclusive_classes

        init = GlorotUniform()
        activation = Rectlin(slope=1.0E-6)
        output_branch = BranchNode(name='overlapping_exclusive')
        layers = [
            MergeMultistream([
            [LSTM(300, init, init_inner=init, activation=activation, gate_activation=Logistic()),
             RecurrentSum()],
            [Affine(300, init, activation=activation)]], 'stack'),
            Affine(100, init, activation=activation),
            Tree([[SkipNode(), output_branch, Affine(len(self.overlapping_classes), init, activation=Logistic())],
                  [output_branch, Affine(len(self.exclusive_classes), init, activation=Softmax())]])
        ]
        super(ClassifierNetwork, self).__init__(layers, optimizer=Adam())

